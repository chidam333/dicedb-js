// source: proto/cmd.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.wire.Command', null, global);
goog.exportSymbol('proto.wire.Response', null, global);
goog.exportSymbol('proto.wire.Response.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wire.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wire.Command.repeatedFields_, null);
};
goog.inherits(proto.wire.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wire.Command.displayName = 'proto.wire.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wire.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wire.Response.repeatedFields_, proto.wire.Response.oneofGroups_);
};
goog.inherits(proto.wire.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wire.Response.displayName = 'proto.wire.Response';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wire.Command.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wire.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.wire.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wire.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wire.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
cmd: jspb.Message.getFieldWithDefault(msg, 1, ""),
argsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wire.Command}
 */
proto.wire.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wire.Command;
  return proto.wire.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wire.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wire.Command}
 */
proto.wire.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmd(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wire.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wire.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wire.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wire.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmd();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string cmd = 1;
 * @return {string}
 */
proto.wire.Command.prototype.getCmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wire.Command} returns this
 */
proto.wire.Command.prototype.setCmd = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string args = 2;
 * @return {!Array<string>}
 */
proto.wire.Command.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wire.Command} returns this
 */
proto.wire.Command.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wire.Command} returns this
 */
proto.wire.Command.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wire.Command} returns this
 */
proto.wire.Command.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wire.Response.repeatedFields_ = [8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.wire.Response.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.wire.Response.ValueCase = {
  VALUE_NOT_SET: 0,
  V_NIL: 2,
  V_INT: 3,
  V_STR: 4,
  V_FLOAT: 5,
  V_BYTES: 6
};

/**
 * @return {proto.wire.Response.ValueCase}
 */
proto.wire.Response.prototype.getValueCase = function() {
  return /** @type {proto.wire.Response.ValueCase} */(jspb.Message.computeOneofCase(this, proto.wire.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wire.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.wire.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wire.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wire.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
err: jspb.Message.getFieldWithDefault(msg, 1, ""),
vNil: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
vInt: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
vStr: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
vFloat: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
vBytes: msg.getVBytes_asB64(),
attrs: (f = msg.getAttrs()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
vListList: jspb.Message.toObjectList(msg.getVListList(),
    google_protobuf_struct_pb.Value.toObject, includeInstance),
vSsMapMap: (f = msg.getVSsMapMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wire.Response}
 */
proto.wire.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wire.Response;
  return proto.wire.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wire.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wire.Response}
 */
proto.wire.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVNil(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVInt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVStr(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVFloat(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVBytes(value);
      break;
    case 7:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttrs(value);
      break;
    case 8:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.addVList(value);
      break;
    case 9:
      var value = msg.getVSsMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wire.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wire.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wire.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wire.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getAttrs();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getVListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
  f = message.getVSsMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string err = 1;
 * @return {string}
 */
proto.wire.Response.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.setErr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool v_nil = 2;
 * @return {boolean}
 */
proto.wire.Response.prototype.getVNil = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.setVNil = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.wire.Response.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearVNil = function() {
  return jspb.Message.setOneofField(this, 2, proto.wire.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wire.Response.prototype.hasVNil = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 v_int = 3;
 * @return {number}
 */
proto.wire.Response.prototype.getVInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.setVInt = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.wire.Response.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearVInt = function() {
  return jspb.Message.setOneofField(this, 3, proto.wire.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wire.Response.prototype.hasVInt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string v_str = 4;
 * @return {string}
 */
proto.wire.Response.prototype.getVStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.setVStr = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.wire.Response.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearVStr = function() {
  return jspb.Message.setOneofField(this, 4, proto.wire.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wire.Response.prototype.hasVStr = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double v_float = 5;
 * @return {number}
 */
proto.wire.Response.prototype.getVFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.setVFloat = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.wire.Response.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearVFloat = function() {
  return jspb.Message.setOneofField(this, 5, proto.wire.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wire.Response.prototype.hasVFloat = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes v_bytes = 6;
 * @return {!(string|Uint8Array)}
 */
proto.wire.Response.prototype.getVBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes v_bytes = 6;
 * This is a type-conversion wrapper around `getVBytes()`
 * @return {string}
 */
proto.wire.Response.prototype.getVBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVBytes()));
};


/**
 * optional bytes v_bytes = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVBytes()`
 * @return {!Uint8Array}
 */
proto.wire.Response.prototype.getVBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.setVBytes = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.wire.Response.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearVBytes = function() {
  return jspb.Message.setOneofField(this, 6, proto.wire.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wire.Response.prototype.hasVBytes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Struct attrs = 7;
 * @return {?proto.google.protobuf.Struct}
 */
proto.wire.Response.prototype.getAttrs = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 7));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.wire.Response} returns this
*/
proto.wire.Response.prototype.setAttrs = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearAttrs = function() {
  return this.setAttrs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wire.Response.prototype.hasAttrs = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated google.protobuf.Value v_list = 8;
 * @return {!Array<!proto.google.protobuf.Value>}
 */
proto.wire.Response.prototype.getVListList = function() {
  return /** @type{!Array<!proto.google.protobuf.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_struct_pb.Value, 8));
};


/**
 * @param {!Array<!proto.google.protobuf.Value>} value
 * @return {!proto.wire.Response} returns this
*/
proto.wire.Response.prototype.setVListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.google.protobuf.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Value}
 */
proto.wire.Response.prototype.addVList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.google.protobuf.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearVListList = function() {
  return this.setVListList([]);
};


/**
 * map<string, string> v_ss_map = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.wire.Response.prototype.getVSsMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.wire.Response} returns this
 */
proto.wire.Response.prototype.clearVSsMapMap = function() {
  this.getVSsMapMap().clear();
  return this;
};


goog.object.extend(exports, proto.wire);
